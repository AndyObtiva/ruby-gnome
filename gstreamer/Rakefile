# -*- ruby -*-

require './../glib2/lib/gnome2-raketask'
require 'open-uri'

package = GNOME2Package.new do |_package|
  _package.summary = "Ruby/GStreamer is a Ruby binding for GStreamer."
  _package.description = "Ruby/GStreamer is a Ruby binding for GStreamer."
  _package.dependency.gem.runtime = ["glib2"]
  _package.win32.packages = ["libsoup"]
  _package.win32.dependencies = ["libxml2"]
  _package.post_install_message = "This library is experimental."
end
package.define_tasks

namespace :win32 do
  dist_dir = Pathname.new("vendor/local").expand_path
  license_dir = dist_dir + "share" + "license"
  tmp_dir = Pathname.new("tmp").expand_path
  download_dir = tmp_dir + "download"

  packages = [
    {
      :name => "gstreamer",
      :label => "GStreamer",
      :version => "0.10.35",
      :configure_args => ["--enable-check"],
    },
    {
      :name => "gst-plugins-base",
      :label => "GStreamer plugins (base)",
      :version => "0.10.35",
      :configure_args => ["--disable-gnome_vfs"],
    },
    {
      :name => "gst-plugins-good",
      :label => "GStreamer plugins (good)",
      :version => "0.10.30",
      :configure_args => ["--disable-gconf"],
    },
    {
      :name => "gst-plugins-bad",
      :label => "GStreamer plugins (bad)",
      :version => "0.10.22",
      :configure_args => [],
    },
    {
      :name => "gst-ffmpeg",
      :label => "GStreamer ffmpeg",
      :version => "0.10.12",
      :configure_args => [],
    },
  ]

  namespace :download do
    binary_url_base = "http://gstreamer.freedesktop.org/src/"
    packages.each do |package|
      base = "#{package[:name]}-#{package[:version]}"
      tar_gz = "#{base}.tar.gz"
      tar_gz_url = "#{binary_url_base}#{package[:name]}/#{tar_gz}"
      tar_gz_full_path = download_dir + tar_gz

      desc "Download #{package[:label]} into #{download_dir}."
      task package[:name] => tar_gz_full_path.to_s

      directory tar_gz_full_path.dirname.to_s
      file tar_gz_full_path.to_s do
        open(tar_gz_url) do |downloaded_tar_gz|
          tar_gz_full_path.open("wb") do |tar_gz_file|
            tar_gz_file.print(downloaded_tar_gz.read)
          end
        end
      end
    end
  end

  namespace :build do
    host = "i686-w64-mingw32"

    task :prepare do
      depended_packages = ["glib2", "atk", "pango", "gdk_pixbuf2", "gtk2"]
      pkg_config_path = (["gstreamer"] + depended_packages).collect do |package|
        "../#{package}/vendor/local/lib/pkgconfig"
      end
      rcairo_win32_path = ENV["RCAIRO_WIN32_PATH"] || "../../rcairo.win32"
      pkg_config_path << "#{rcairo_win32_path}/vendor/local/lib/pkgconfig"
      ENV["PKG_CONFIG_PATH"] = pkg_config_path.collect do |path|
        File.expand_path(path)
      end.join(":")
    end

    packages.each do |package|
      desc "Build #{package[:label]} and install it into #{dist_dir}."
      task package[:name] => [:prepare, "win32:download:#{package[:name]}"] do
        package_tmp_dir = tmp_dir + package[:name]
        rm_rf(package_tmp_dir)
        mkdir_p(package_tmp_dir)

        base = "#{package[:name]}-#{package[:version]}"
        tar_gz = "#{base}.tar.gz"
        tar_gz_full_path = download_dir + tar_gz
        Dir.chdir(package_tmp_dir.to_s) do
          sh("tar", "xzf", tar_gz_full_path.to_s) or exit(false)
        end

        Dir.chdir((package_tmp_dir + base).to_s) do
          sh("./configure",
             "--prefix=#{dist_dir}",
             "--host=#{host}",
             *package[:configure_args]) or exit(false)
          make_args = []
          make_n_jobs = ENV["MAKE_N_JOBS"]
          make_args << "-j#{make_n_jobs}" if make_n_jobs
          ENV["GREP_OPTIONS"] = "--text"
          sh("nice", "make", *make_args) or exit(false)
          sh("make", "install") or exit(false)

          package_license_dir = license_dir + package[:name]
          mkdir_p(package_license_dir)
          files = ["AUTHORS", "COPYING"]
          cp(files, package_license_dir)
        end
      end
    end
  end

  # deprecated this. remove me.
  desc "create *.pc files"
  task :pc do
    require "pkg-config"
    base_dir = File.expand_path(File.join("vendor", "local"))
    pkgconfig_dir_path = File.join(base_dir, "lib", "pkgconfig")
    mkdir_p(pkgconfig_dir_path)

    gst_version_h = File.join(base_dir, "include",
                              "gstreamer-0.10", "gst", "gstversion.h")
    case File.read(gst_version_h)
    when /^#define GST_VERSION_MICRO \((\d+)\)/
      micro_version = $1.to_i
    else
      raise "can't detect GStreamer micro version from <#{gst_version_h}>."
    end
    win32_gstreamer_version = "0.10.#{micro_version}"

    packages = ["gstreamer-0.10",
                "gstreamer-pbutils-0.10",
                "gstreamer-plugins-base-0.10"]
    packages.each do |package|
      package_config = PackageConfig.new(package)
      linux_pc_path = package_config.pc_path
      pc_path = File.join(pkgconfig_dir_path, "#{package}.pc")
      File.open(pc_path, "w") do |pc_file|
        linux_pc = File.read(linux_pc_path)
        pc = linux_pc.gsub(/\Aprefix=.+$/) {"prefix=#{base_dir}"}
        pc = pc.gsub(/^Version:.*$/, "Version: #{win32_gstreamer_version}")
        pc_file.print(pc)
      end
    end
  end
  # task :download => :pc
end
